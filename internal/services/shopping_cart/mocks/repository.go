// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mottetm/Shopping-Cart/internal/services/shopping_cart (interfaces: ShoppingCartRepository)

// Package shopping_cart_mocks is a generated GoMock package.
package shopping_cart_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	shopping_cart "github.com/mottetm/Shopping-Cart/internal/services/shopping_cart"
)

// MockShoppingCartRepository is a mock of ShoppingCartRepository interface.
type MockShoppingCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShoppingCartRepositoryMockRecorder
}

// MockShoppingCartRepositoryMockRecorder is the mock recorder for MockShoppingCartRepository.
type MockShoppingCartRepositoryMockRecorder struct {
	mock *MockShoppingCartRepository
}

// NewMockShoppingCartRepository creates a new mock instance.
func NewMockShoppingCartRepository(ctrl *gomock.Controller) *MockShoppingCartRepository {
	mock := &MockShoppingCartRepository{ctrl: ctrl}
	mock.recorder = &MockShoppingCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShoppingCartRepository) EXPECT() *MockShoppingCartRepositoryMockRecorder {
	return m.recorder
}

// ConfirmItem mocks base method.
func (m *MockShoppingCartRepository) ConfirmItem(arg0 context.Context, arg1 shopping_cart.ItemId, arg2 shopping_cart.ReservationId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmItem", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmItem indicates an expected call of ConfirmItem.
func (mr *MockShoppingCartRepositoryMockRecorder) ConfirmItem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmItem", reflect.TypeOf((*MockShoppingCartRepository)(nil).ConfirmItem), arg0, arg1, arg2)
}

// CreateItem mocks base method.
func (m *MockShoppingCartRepository) CreateItem(arg0 context.Context, arg1 shopping_cart.ItemName, arg2 shopping_cart.ItemQuantity) (shopping_cart.ItemId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", arg0, arg1, arg2)
	ret0, _ := ret[0].(shopping_cart.ItemId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockShoppingCartRepositoryMockRecorder) CreateItem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockShoppingCartRepository)(nil).CreateItem), arg0, arg1, arg2)
}

// GetItems mocks base method.
func (m *MockShoppingCartRepository) GetItems(arg0 context.Context) ([]shopping_cart.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", arg0)
	ret0, _ := ret[0].([]shopping_cart.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockShoppingCartRepositoryMockRecorder) GetItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockShoppingCartRepository)(nil).GetItems), arg0)
}
