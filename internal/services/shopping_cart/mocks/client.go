// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mottetm/Shopping-Cart/internal/services/shopping_cart (interfaces: ReservationClient)

// Package shopping_cart_mocks is a generated GoMock package.
package shopping_cart_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	shopping_cart "github.com/mottetm/Shopping-Cart/internal/services/shopping_cart"
)

// MockReservationClient is a mock of ReservationClient interface.
type MockReservationClient struct {
	ctrl     *gomock.Controller
	recorder *MockReservationClientMockRecorder
}

// MockReservationClientMockRecorder is the mock recorder for MockReservationClient.
type MockReservationClientMockRecorder struct {
	mock *MockReservationClient
}

// NewMockReservationClient creates a new mock instance.
func NewMockReservationClient(ctrl *gomock.Controller) *MockReservationClient {
	mock := &MockReservationClient{ctrl: ctrl}
	mock.recorder = &MockReservationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationClient) EXPECT() *MockReservationClientMockRecorder {
	return m.recorder
}

// ReserveItem mocks base method.
func (m *MockReservationClient) ReserveItem(arg0 context.Context, arg1 shopping_cart.ItemName) (shopping_cart.ReservationId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveItem", arg0, arg1)
	ret0, _ := ret[0].(shopping_cart.ReservationId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveItem indicates an expected call of ReserveItem.
func (mr *MockReservationClientMockRecorder) ReserveItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveItem", reflect.TypeOf((*MockReservationClient)(nil).ReserveItem), arg0, arg1)
}
